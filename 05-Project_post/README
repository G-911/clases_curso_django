# 🧠 Clase 3: Integrando Modelos y Mostrando Datos en HTML – Aplicación Web con Django

En esta tercera clase del curso de Django, continuarás construyendo sobre la base de tu proyecto django_project y tu aplicación post. Esta vez, el enfoque será en la integración de modelos para manejar y almacenar datos, y cómo mostrar esos datos dinámicamente en tus plantillas HTML.

La app sigue siendo “Inicio del Curso”, pero ahora es más potente. Aprenderás a definir la estructura de tus datos con modelos, a guardar información en tu base de datos y a recuperarla para presentarla al usuario. ¡Este es un paso crucial para crear aplicaciones web interactivas y con contenido dinámico!

---

## 🎯 Objetivos de la Clase

- Crear un entorno virtual y un proyecto Django (repaso).
- Crear la app post dentro del proyecto (repaso).
- Configurar el entorno para usar plantillas HTML (repaso).
- Renderizar la vista home.html usando TemplateView (repaso).
- Crear un modelo simple en Django para almacenar información.
- Realizar migraciones para aplicar el modelo a la base de datos.
- Mostrar datos del modelo en la plantilla HTML usando el contexto de la vista.
- Visualizar la página en el navegador mediante configuración en urls.py.

---

## 🛠️ Lo Que Aprenderás

- Cómo iniciar un proyecto Django desde cero.
- Cómo estructurar una app Django y vincularla al proyecto.
- Cómo configurar la carpeta templates para usar archivos HTML.
- Cómo definir rutas y vistas usando clases.
- Cómo definir modelos en Django para representar y organizar tus datos.
- Cómo usar el ORM (Object-Relational Mapper) de Django para interactuar con la base de datos sin SQL directo.
- Cómo pasar datos de un modelo (o cualquier otro dato) desde la vista a una plantilla HTML.

---

## 🚀 Guía Paso a Paso

### 🔧 1. Requisitos Previos

Asegúrate de tener instalado:

- ✅ Python 3.10 o superior
- ✅ pip (gestor de paquetes de Python)
- ✅ virtualenv *(opcional pero recomendado)*

---

### 🐍 2. Crear y Activar un Entorno Virtual

```bash
python -m venv env

# Activar el entorno:
source env/bin/activate     # En Linux/macOS
env\Scripts\activate        # En Windows
```

---

### 📦 3. Instalar Django
```bash
pip install django  # Descarga django
```

---

### 📁 4. Crear el Proyecto Django
```bash
django-admin startproject django_project .  # Esto genera la carpeta django_project/ dentro de tu proyecto
```

#### 🔸 Nota: No olvides el espacio y el punto (.) al final para instalar el proyecto en la carpeta actual.

---

### 🏗️ 5. Crear la App Django
```bash
python manage.py startapp post  # Esto generará la carpeta post/ dentro de tu proyecto.
```  

---

### ⚙️ 6. Registrar la App en el proyecto

#### 1. Settings.py
Edita django_project/settings.py y agrega 'post' en INSTALLED_APPS:

INSTALLED_APPS = [
    ...
    'post',
]

#### 2. urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('post.urls'))  # La raíz del sitio web delega sus URLs a la app post
]

---

### 💾 7. Crear el Modelo en models.py
En post/models.py, define un modelo simple para almacenar un mensaje de bienvenida. Este modelo tendrá un campo para el contenido del mensaje y otro para la fecha de creación:

from django.db import models

class Post(models.Model):
    title = models.TextField(max_length=200)
    description = models.TextField()

    def __str__(self):
        return self.title
---

### 📤 8. Realizar Migraciones
Después de crear o modificar modelos, siempre debes indicarle a Django que cree o actualice las tablas correspondientes en tu base de datos.
```bash
python manage.py makemigrations # Crea los archivos de migración (plan de cambios)
python manage.py migrate        # Aplica los cambios a la base de datos (ejecuta el plan)
```

---

### 📝 9. Crear la Carpeta de Templates con base.html, home.html, detail.html
Crea una carpeta llamada templates y dentro de ella el archivo home.html. Modificaremos home.html para que pueda mostrar el contenido de nuestro modelo dinámicamente:
<!-- templates/home.html -->
{% extends 'base.html' %}

{% block content %}

  {% if user.is_authenticated %}
    <a href="{% url 'create' %}">Crear nueva publicación</a>
  {% endif %}

  <ul>
    {% for post in object_list %}
      <li>
        <a href="{% url 'detail' post.pk %}">{{ post.title }}</a>

        {% if user.is_authenticated and post.author == user %}
          | <a href="{% url 'edit' post.pk %}">Editar</a>
          | <a href="{% url 'delete' post.pk %}">Eliminar</a>
        {% endif %}
      </li>
    {% endfor %}
  </ul>

{% endblock %}

<!-- templates/base.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Bienvenido{% if user.is_authenticated %}, {{ user.username }}{% endif %}</h1>

    <nav>
    <ul>
        {% if user.is_authenticated %}
            <form method="post" action="{% url 'logout' %}">
                {% csrf_token %}
                <button type="submit">Cerrar sesión</button>
            </form>
        {% else %}
            <li><form method="post" action="{% url 'login' %}">
                {% csrf_token %}
                {{ form.as_p }}
                <button type="submit">Iniciar sesión</button>
            </form></li>

            <li><a href="{% url 'signup' %}">Registrarse</a></li>
        {% endif %}
    </ul>
    </nav>

    <p>Este es un ejemplo básico para mostrar cómo navegar entre vistas de autenticación.</p>


    {% block content %}

    {% endblock %}

<!-- templates/detail.html -->
{% extends 'base.html' %}

{% block content %}
    <h2>Detail</h2>
    <!-- Título del post -->
    <h1>{{ post.title }}</h1>
    
    <!-- Descripción completa -->
        <p>{{ post.description }}</p>
    
    <!-- Imagen (si existe) -->
  {% if object.image %}
    <img src="{{ object.image.url }}" alt="Imagen del post">
  {% endif %}

  {% if user.is_authenticated and object.author == user %}
    <a href="{% url 'edit' object.pk %}">Editar</a>
    <a href="{% url 'delete' object.pk %}">Eliminar</a>
  {% endif %}
{% endblock %}

---

### 🧭 10. Configurar settings.py para Templates
En el bloque TEMPLATES de django_project/settings.py, ajusta la clave DIRS para que Django sepa dónde buscar tus plantillas:

TEMPLATES = [
    {
        'DIRS': [BASE_DIR / 'templates'], # Asegura que Django encuentre tu carpeta 'templates'
        ...
    },
]

---

### 👁️ 11. Crear la Vista en views.py
En post/views.py, modificaremos la vista HomeView para que no solo renderice la plantilla, sino que también obtenga el mensaje de bienvenida de nuestro modelo y lo pase a la plantilla a través del contexto:

from django.shortcuts import render
from django.views.generic import ListView

from .models import Post

class PostListView(ListView):
    template_name = "home.html"
    model = Post

---

### 🛣️ 12. Configurar Rutas en urls.py
Edita django_project/urls.py para que la URL raíz (la ruta vacía '') apunte a nuestra HomeView:

from django.contrib import admin
from django.urls import path
from post.views import HomeView # Importa tu vista

urlpatterns = [
    path('admin/', admin.site.urls), # Ruta para el panel de administración
    path('', HomeView.as_view(), name='home'), # Ruta para la página de inicio
]

---

### ➕ 13. Agregar un Mensaje de Bienvenida (¡Para ver el modelo en acción!)
Para que el mensaje aparezca en tu home.html, necesitas añadir un registro en tu modelo Post. Tienes dos formas principales de hacerlo:

Usando el Panel de Administración de Django (Recomendado para manejar datos):
#### 1. Crea un superusuario para acceder al panel de administración (si no lo has hecho ya):

```bash
python manage.py createsuperuser
```
Sigue las instrucciones en pantalla para definir tu usuario y contraseña.

#### 2. Registra tu modelo en post/admin.py para que sea visible en el panel:

from django.contrib import admin
from .models import Post

admin.site.register(Post)

#### 3. Levanta el servidor de desarrollo:

```bash
python manage.py runserver
```

#### 4. Abre tu navegador y navega a: http://127.0.0.1:8000/admin/.

#### 5. Inicia sesión con las credenciales del superusuario que creaste.

#### 6. Deberías ver una sección para "post" y dentro de ella, "Mensajes de bienvenida". Haz clic en "Mensajes de bienvenida" y luego en "Añadir mensaje de bienvenida" para crear tu primer registro.
---

### 🚦 14. Levantar el Servidor y Verificar
```bash
python manage.py runserver  # Esto levanta el servidor de desarrollo
```

---

### 🏗️ 15. Crear la App authentication
```bash
python manage.py startapp authentication   # Esto generará la carpeta authentication/ dentro de tu proyecto.
```  

---

### ⚙️ 16. Registrar la App en settings.py
Edita django_project/settings.py y agrega 'post' y 'authentication' en INSTALLED_APPS:
INSTALLED_APPS = [
    ...
    'post',
    'authentication'
]

---

### 🗂️ 17. Modifica la Carpeta de Templates, crea la subcarpeta registration que contenga los archivos login.html y signup.html
<!-- templates/registration/signup.html -->
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Iniciar sesión</button>
</form>

<!-- templates/registration/signup.html -->
<h2>Iniciar sesión</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Entrar</button>
</form>

---

### 👁️ 18. Crear la Vista en views.py
En authentication/views.py:
from django.contrib.auth.forms import UserCreationForm
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView

class SignUpView(CreateView):
    form_class = UserCreationForm
    success_url = reverse_lazy('login')
    template_name = 'registration/signup.html'

---

### 🛣️ 19. Configurar Rutas en urls.py
<!-- Edita django_project/urls.py: -->
from django.contrib import admin
from django.urls import path, include  

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('post.urls')),  
    path('accounts/', include('authentication.urls')) 
]

<!-- Edita authentication/urls.py -->
from django.contrib import admin
from django.urls import path, include
from .views import SignUpView

urlpatterns = [
    path('', include('django.contrib.auth.urls')),  # ¡Esta línea es crucial!
    path('signup/', SignUpView.as_view(), name='signup'),
]

---

### 🚦 20. Levantar el Servidor
```bash
python manage.py runserver  # Esto levanta el servidor
```

Abre tu navegador en:  http://127.0.0.1:8000/  

---

✅ ¡Listo!