# 🛡️ Autenticación y Autorización en Django con django.contrib.auth

Este proyecto tiene como objetivo enseñarte a implementar un sistema completo de autenticación y autorización utilizando la aplicación integrada django.contrib.auth. Aprenderás a gestionar usuarios, permisos, grupos y sesiones de forma segura y escalable dentro de tus aplicaciones Django.

---

## 🎯 Objetivos del Proyecto
- Comprender el funcionamiento interno de django.contrib.auth
- Implementar formularios de login, logout y registro de usuarios
- Configurar permisos y grupos para controlar el acceso a vistas y funcionalidades
- Personalizar el modelo de usuario si se requiere una estructura más compleja
- Utilizar decoradores y mixins para proteger rutas y vistas

---

## 📚 Qué aprenderás
- Cómo funciona el sistema de autenticación de Django
- Cómo crear y gestionar usuarios desde el panel de administración y desde código
- Cómo proteger vistas con @login_required y PermissionRequiredMixin
- Cómo extender el modelo de usuario con AbstractUser o AbstractBaseUser
- Cómo manejar sesiones y cookies de autenticación
- Cómo implementar flujos de login/logout/registro con vistas basadas en clases o funciones

---

## 🚀 Guía Paso a Paso

### 🔧 1. Requisitos Previos

Asegúrate de tener instalado:

- ✅ Python 3.10 o superior
- ✅ pip (gestor de paquetes de Python)
- ✅ virtualenv *(opcional pero recomendado)*

---

### 🐍 2. Crear y Activar un Entorno Virtual

```bash
python -m venv env

# Activar el entorno:
source env/bin/activate     # En Linux/macOS
env\Scripts\activate        # En Windows
```

---

### 📦 3. Instalar Django
```bash
pip install django  # Descarga django
```

---

### 📁 4. Crear el Proyecto Django
```bash
django-admin startproject django_project .  # Esto genera la carpeta django_project/ dentro de tu proyecto
```

#### 🔸 Nota: No olvides el espacio y el punto (.) al final para instalar el proyecto en la carpeta actual.

---

### 🏗️ 5. Crear la App Django
```bash
python manage.py startapp Django_app  # Esto generará la carpeta Django_app/ dentro de tu proyecto.
```  

---

### ⚙️ 6. Registrar la App en settings.py
Edita django_project/settings.py y agrega 'Django_app' en INSTALLED_APPS:
INSTALLED_APPS = [
    ...
    'Django_app',
]

---

### 🗂️ 7. Crear la Carpeta de Templates, home.html, login.html y signup.html
Dentro de Django_app/, crea una carpeta llamada templates y dentro de ella el archivo home.html:
<!-- templates/home.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Inicio del curso</title>
</head>
<body>
    <h1>¡Bienvenidos a Django! 🎉</h1>
    <p>Esta es su primera vista HTML funcionando.</p>
</body>
</html>

<!-- templates/base.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Bienvenido{% if user.is_authenticated %}, {{ user.username }}{% endif %}</h1>

    <nav>
    <ul>
        {% if user.is_authenticated %}
            <form method="post" action="{% url 'logout' %}">
                {% csrf_token %}
                <button type="submit">Cerrar sesión</button>
            </form>
        {% else %}
            <li><form method="post" action="{% url 'login' %}">
                {% csrf_token %}
                {{ form.as_p }}
                <button type="submit">Iniciar sesión</button>
            </form></li>

            <li><a href="{% url 'signup' %}">Registrarse</a></li>
        {% endif %}
    </ul>
    </nav>

    <p>Este es un ejemplo básico para mostrar cómo navegar entre vistas de autenticación.</p>


    {% block content %}

    {% endblock %}
</body>
</html>

<!-- templates/registration/signup.html -->
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Iniciar sesión</button>
</form>

<!-- templates/registration/signup.html -->
<h2>Iniciar sesión</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Entrar</button>
</form>
---

### 🧭 8. Configurar settings.py para Templates
En el bloque TEMPLATES, ajusta la clave DIRS:
TEMPLATES = [
    {
        'DIRS': [BASE_DIR / 'templates'],
        ...
    },
]

---

### 👁️ 9. Crear la Vista en views.py
En Django_app/views.py:
from django.contrib.auth.forms import UserCreationForm
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView

class SignUpView(CreateView):
    form_class = UserCreationForm
    success_url = reverse_lazy('login')
    template_name = 'registration/signup.html'

---

### 🛣️ 10. Configurar Rutas en urls.py
<!-- Edita django_project/urls.py: -->
from django.contrib import admin
from django.urls import path, include  

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('django_app.urls')),  
    path('accounts/', include('authentication.urls')) 
]

<!-- Edita django_app/urls.py -->
from django.contrib import admin
from django.urls import path, include
from .views import SignUpView

urlpatterns = [
    path('', include('django.contrib.auth.urls')),  # ¡Esta línea es crucial!
    path('signup/', SignUpView.as_view(), name='signup'),
]

---

### 🚦 11. Levantar el Servidor
```bash
python manage.py runserver  # Esto levanta el servidor
```

Abre tu navegador en:  http://127.0.0.1:8000/  

---

✅ ¡Listo!
Tu primer proyecto Django está funcionando y mostrando home.html. Esta es una base excelente para comenzar a explorar más funciones de Django.